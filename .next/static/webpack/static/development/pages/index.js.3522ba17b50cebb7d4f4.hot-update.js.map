{"version":3,"file":"static/webpack/static/development/pages/index.js.3522ba17b50cebb7d4f4.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["// @generated: @expo/next-adapter@2.1.52\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n    StyleSheet,\n    Text,\n    TextInput,\n    TouchableOpacity,\n    View,\n} from \"react-native\";\nimport { SSE } from \"../utils/sse\";\n\nlet sourceWith;\nlet sourceWithout;\n\nlet timerWith;\n\nexport default function App() {\n    const [withChecks, setWithChecks] = useState([]);\n    const [withoutChecks, setWithoutChecks] = useState([]);\n    const [withChecksRunning, setWithChecksRunning] = useState(false);\n    const [url, setUrl] = useState(\"https://quantum.sh\");\n\n    const addLog = (text, without) => {\n        if (without)\n            setWithoutChecks([\n                { time: Date().toString(), text },\n                ...withoutChecks,\n            ]);\n        else setWithChecks([{ time: Date().toString(), text }, ...withChecks]);\n    };\n\n    useEffect(() => {\n        if (!withChecksRunning) {\n            addLog(\"closed\");\n            if (timerWith) clearTimeout(timerWith);\n        }\n    }, [withChecksRunning]);\n\n    const startPoll = async () => {\n        try {\n            if (withChecksRunning) {\n                addLog(\"already running\");\n                return;\n            }\n            addLog(\"starting\");\n            setWithChecksRunning(true);\n\n            if (sourceWith) sourceWith.close();\n            if (timerWith) clearTimeout(timerWith);\n\n            sourceWith = new SSE(url + \"/api/document/poll\", {\n                headers: { \"Content-Type\": \"application/json\" },\n                payload: JSON.stringify({ timeOnClient: Date().toString() }),\n            });\n\n            timerWith = setTimeout(() => {\n                addLog(\"closed because no ping\");\n                setWithChecksRunning(false);\n            }, 20000);\n            sourceWith.addEventListener(\"message\", (e) => {\n                const news = JSON.parse(e.data);\n                console.log(news);\n                switch (news.messageCode) {\n                    case \"ping\":\n                        addLog(`ping ${news.time}`);\n\n                        if (timerWith) clearTimeout(timerWith);\n                        timerWith = setTimeout(() => {\n                            addLog(\"closed because no ping\");\n\n                            setWithChecksRunning(false);\n                        }, 20000);\n\n                        break;\n                }\n            });\n\n            sourceWith.addEventListener(\"error\", function () {\n                setWithChecksRunning(false);\n            });\n            sourceWith.stream();\n        } catch (error) {\n            setWithChecksRunning(false);\n        }\n    };\n    const sendOneReq = async () => {\n        try {\n            const res = await axios.post(`${url}/api/utils/time`);\n            if (res?.data?.time)\n                addLog(`time on server from one time req: ${res.data.time}`);\n        } catch (error) {\n            addLog(\"one time req error\");\n            console.log(error);\n        }\n    };\n    return (\n        <View style={styles.container}>\n            <Text>Url:</Text>\n            <TouchableOpacity onPress={() => setUrl(\"http://localhost:5000\")}>\n                <Text>localhost:5000</Text>\n            </TouchableOpacity>\n            <TouchableOpacity onPress={() => setUrl(\"https://quantum.sh\")}>\n                <Text>https://quantum.sh</Text>\n            </TouchableOpacity>\n            <View style={{ padding: 10, margin: 10, backgroundColor: \"#ddd\" }}>\n                <TextInput value={url} onChangeText={setUrl} />\n            </View>\n\n            <TouchableOpacity\n                style={{\n                    margin: 10,\n                    padding: 10,\n                    backgroundColor: \"green\",\n                    color: \"white\",\n                }}\n                onPress={startPoll}\n            >\n                <Text>Start poll (checks every 20 sec)</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n                style={{\n                    margin: 10,\n                    padding: 10,\n                    backgroundColor: \"red\",\n                    color: \"white\",\n                }}\n                onPress={() => setWithChecksRunning(false)}\n            >\n                <Text>Stop poll</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n                style={{\n                    margin: 10,\n                    padding: 10,\n                    backgroundColor: \"red\",\n                    color: \"white\",\n                }}\n                onPress={sendOneReq}\n            >\n                <Text>One time req</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n                onPress={() => setWithChecks([])}\n                style={{\n                    margin: 10,\n                    padding: 10,\n                    backgroundColor: \"grey\",\n                    color: \"white\",\n                }}\n            >\n                <Text>Clear log</Text>\n            </TouchableOpacity>\n            <Text>Log</Text>\n            {withChecks.map((item) => (\n                <View style={{ flexDirection: \"row\" }}>\n                    <View>\n                        <Text>{item.time}</Text>\n                    </View>\n                    <View>\n                        <Text style={{ color: \"blue\" }}>{item.text}</Text>\n                    </View>\n                </View>\n            ))}\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n    },\n    text: {\n        fontSize: 16,\n    },\n});\n"],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}